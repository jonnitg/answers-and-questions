{"version":3,"sources":["serviceWorker.js","components/answer/answer.js","components/question/question.js","components/counter/counter.js","components/timer/timer.js","components/timer/helper.js","components/stepper/stepper.js","components/loading/loading.js","components/score/score.js","components/score/helper.js","components/start/start.js","components/test-wrapper/test-wrapper.js","index.js"],"names":["Boolean","window","location","hostname","match","Input","styled","input","attrs","type","name","Label","label","Circle","span","Text","Answer","text","id","onChange","checked","htmlFor","value","Container","div","QuestionHeading","h1","Answers","ul","AnswerOption","li","Question","answers","cacheChecked","map","answer","key","Counter","limit","current","Timer","seconds","time","minutes","Math","floor","formatSeconds","GridArea","form","SettingsSection","ButtonsSection","Button","button","PrevButton","NextButton","FinalizeButton","Stepper","questions","onCompleteTest","useState","LIMIT_TIME","timeLeft","setTimeLeft","setCurrent","cacheAnswers","setCacheAnswers","useEffect","timer","setTimeout","timing","setInterval","clearTimeout","clearInterval","onSubmit","event","preventDefault","length","target","onClick","animation","keyframes","LoadingContainer","LoadingWrapper","LoadingCircle","Loading","ScoreContainer","ScoreHeading","ScoreText","p","ScoreButton","Score","resetPhases","loading","setLoading","totalScore","setTotalScore","correctAnswer","question","correctAnswerId","getCorrectAnswers","StartContainer","StartHeading","StartText","StartButton","Start","questionsAmount","nextPhase","GlobalStyle","createGlobalStyle","DivContainer","Wrapper","TestWrapper","phase","setPhase","setAnswers","ReactDOM","render","StrictMode","data","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fe8a7350.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst Input = styled.input.attrs({ type: 'radio', name: 'select' })`\n  opacity: 0;\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  transform: translate(-50%, -50%);\n  z-index: -1;\n`;\n\nconst Label = styled.label`\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  flex-wrap: nowrap;\n  position: relative;\n  padding-top: 6px;\n  padding-bottom: 6px;\n  cursor: pointer;\n`;\n\nconst Circle = styled.span`\n  position: relative;\n  width: 1em;\n  height: 1em;\n  border: 2px solid black;\n  border-radius: 50%;\n  margin-right: 0.6em;\n\n  ${Input}:checked + &::before {\n    opacity: 1;\n    transform: scale(0.6);\n  }\n\n  ${Input}:active + &::after {\n    opacity: 0.1;\n    transform: scale(2.6);\n  }\n\n  &::after,\n  &::before {\n    content: '';\n    display: block;\n\n    width: inherit;\n    height: inherit;\n\n    border-radius: inherit;\n\n    position: absolute;\n    transform: scale(0);\n    transform-origin: center center;\n  }\n\n  &:before {\n    background: black;\n    opacity: 0;\n    transition: 0.3s;\n  }\n\n  &:after {\n    background: black;\n    opacity: 0.4;\n    transition: 0.6s;\n  }\n`;\n\nconst Text = styled.span``;\n\nconst Answer = ({ text, id, onChange, checked }) => {\n  return (\n    <Label htmlFor={id}>\n      <Input id={id} value={id} onChange={onChange} checked={checked} />\n      <Circle />\n      <Text>{text}</Text>\n    </Label>\n  );\n};\n\nexport default Answer;\n","import React from 'react';\nimport Answer from 'components/answer';\nimport styled from 'styled-components';\n\nconst Container = styled.div``;\n\nconst QuestionHeading = styled.h1`\n  margin-top: 0;\n`;\n\nconst Answers = styled.ul`\n  list-style: none;\n  padding: 0;\n  margin: 8px;\n`;\n\nconst AnswerOption = styled.li`\n  padding: 4px;\n  font-size: 1em;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n\n  &:last-child {\n    border-bottom: none;\n  }\n`;\n\nconst Question = ({ text, answers, onChange, cacheChecked }) => {\n  return (\n    <Container>\n      <QuestionHeading>{text}</QuestionHeading>\n      <Answers>\n        {answers.map((answer) => (\n          <AnswerOption key={answer.id}>\n            <Answer\n              id={answer.id}\n              text={answer.text}\n              onChange={onChange}\n              checked={answer.id === cacheChecked || false}\n            />\n          </AnswerOption>\n        ))}\n      </Answers>\n    </Container>\n  );\n};\n\nexport default Question;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst Text = styled.span`\n  font-size: 0.8em;\n  letter-spacing: 1px;\n  opacity: 0.6;\n`;\n\nconst Counter = ({ limit, current }) => {\n  return (\n    <Text>\n      Question: {current}/{limit}\n    </Text>\n  );\n};\n\nexport default Counter;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { formatSeconds } from './helper';\n\nconst Text = styled.span`\n  font-size: 0.8em;\n  letter-spacing: 1px;\n  opacity: 0.6;\n`;\n\nconst Timer = ({ seconds }) => {\n  return <Text>{formatSeconds(seconds)}</Text>;\n};\n\nexport default Timer;\n","/**\n *\n * @param {number} time in seconds\n * @return {string} formated\n */\nexport const formatSeconds = (time) => {\n  const minutes = Math.floor(time / 60);\n\n  if (time >= 300) {\n    return `${minutes}min.`;\n  }\n  const seconds = time % 60;\n\n  if (minutes !== 0) {\n    return `${minutes}min. ${seconds}segs.`;\n  }\n\n  return `${seconds}segs.`;\n};\n","import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport Question from 'components/question';\nimport Counter from 'components/counter';\nimport Timer from 'components/timer';\n\nconst LIMIT_TIME = 1000 * 60; // 1 minute\n\nconst GridArea = styled.form`\n  display: grid;\n  grid-template-rows: 20px auto 50px;\n  grid-gap: 8px;\n  height: 100%;\n`;\n\nconst SettingsSection = styled.div`\n  display: inline-flex;\n  align-items: center;\n  justify-content: space-between;\n`;\n\nconst ButtonsSection = styled.div`\n  display: flex;\n`;\n\nconst Button = styled.button`\n  appearance: none;\n  font-size: 1em;\n  border: 0;\n  margin: 0;\n  padding: 0;\n  padding-left: 0.6em;\n  padding-right: 0.6em;\n  cursor: pointer;\n  outline: none;\n\n  &:hover {\n    border-bottom: 2px solid black;\n  }\n`;\n\nconst PrevButton = styled(Button)`\n  justify-self: flex-start;\n`;\n\nconst NextButton = styled(Button)`\n  margin-left: auto;\n  justify-self: flex-end;\n`;\n\nconst FinalizeButton = styled(NextButton)``;\n\nconst Stepper = ({ questions, onCompleteTest }) => {\n  const [timeLeft, setTimeLeft] = useState(LIMIT_TIME / 1000);\n  const [current, setCurrent] = useState(0);\n  const [cacheAnswers, setCacheAnswers] = useState({});\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      onCompleteTest(cacheAnswers);\n    }, LIMIT_TIME);\n    const timing = setInterval(() => {\n      setTimeLeft((timeLeft) => timeLeft - 1);\n    }, 1000);\n\n    return () => {\n      clearTimeout(timer);\n      clearInterval(timing);\n    };\n  }, [cacheAnswers, onCompleteTest]);\n\n  const handleChange = (event) => {\n    setCacheAnswers({\n      ...cacheAnswers,\n      [questions[current].id]: event.target.value,\n    });\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    onCompleteTest(cacheAnswers);\n  };\n\n  return (\n    <GridArea onSubmit={handleSubmit}>\n      <SettingsSection>\n        <Timer seconds={timeLeft} />\n        <Counter current={current + 1} limit={questions.length} />\n      </SettingsSection>\n\n      <Question\n        text={questions[current].text}\n        id={questions[current].id}\n        answers={questions[current].answers}\n        onChange={handleChange}\n        cacheChecked={cacheAnswers[questions[current].id]}\n      />\n\n      <ButtonsSection>\n        {current > 0 && (\n          <PrevButton type=\"button\" onClick={() => setCurrent(current - 1)}>\n            Previous\n          </PrevButton>\n        )}\n\n        {current !== questions.length - 1 ? (\n          <NextButton type=\"button\" onClick={() => setCurrent(current + 1)}>\n            Next\n          </NextButton>\n        ) : (\n          <FinalizeButton type=\"submit\">Finalize</FinalizeButton>\n        )}\n      </ButtonsSection>\n    </GridArea>\n  );\n};\n\nexport default Stepper;\n","import React from 'react';\nimport styled, { keyframes } from 'styled-components';\n\nconst animation = keyframes`\n  0% {\n    top: 36px;\n    left: 36px;\n    width: 0;\n    height: 0;\n    opacity: 1;\n  }\n\n  100% {\n    top: 0px;\n    left: 0px;\n    width: 72px;\n    height: 72px;\n    opacity: 0;\n  }\n`;\n\nconst LoadingContainer = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\nconst LoadingWrapper = styled.div`\n  display: inline-block;\n  position: relative;\n  width: 80px;\n  height: 80px;\n`;\nconst LoadingCircle = styled.div`\n  position: absolute;\n  border: 4px solid #000;\n  opacity: 1;\n  border-radius: 50%;\n  animation: ${animation} 1s cubic-bezier(0, 0.2, 0.8, 1) infinite;\n`;\n\nconst Loading = () => (\n  <LoadingContainer>\n    <LoadingWrapper>\n      <LoadingCircle />\n    </LoadingWrapper>\n  </LoadingContainer>\n);\n\nexport default Loading;\n","import React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport Loading from 'components/loading';\nimport { getCorrectAnswers } from './helper';\n\nconst ScoreContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  height: 100%;\n`;\n\nconst ScoreHeading = styled.h1`\n  margin: 0;\n`;\nconst ScoreText = styled.p``;\nconst ScoreButton = styled.button`\n  appearance: none;\n  font-size: 1em;\n  border: 0;\n  margin: 0;\n  padding: 0.6em 1.6em;\n  font-size: 1.2em;\n  border: 2px solid black;\n  cursor: pointer;\n  outline: none;\n\n  &:hover {\n    background-color: #000;\n    color: #fff;\n  }\n`;\n\nconst Score = ({ questions, answers, resetPhases }) => {\n  const [loading, setLoading] = useState(true);\n  const [totalScore, setTotalScore] = useState(0);\n\n  useEffect(() => {\n    setLoading(false);\n    setTotalScore(getCorrectAnswers(questions, answers));\n  }, [answers, questions]);\n\n  if (loading) {\n    return <Loading />;\n  }\n\n  return (\n    <ScoreContainer>\n      <ScoreHeading>Thanks for your participation!</ScoreHeading>\n      <ScoreText>\n        You got {totalScore} right of {questions.length} questions\n      </ScoreText>\n      <ScoreButton type=\"button\" onClick={resetPhases}>\n        Reset Test\n      </ScoreButton>\n    </ScoreContainer>\n  );\n};\n\nexport default Score;\n","/**\n *\n * @param {array} questions\n * @param {object} answers\n */\nexport const getCorrectAnswers = (questions, answers) => {\n  let correctAnswer = 0;\n  for (const question of questions) {\n    const isCorrect = answers[question.id] === question.correctAnswerId;\n\n    if (isCorrect) {\n      correctAnswer++;\n    }\n  }\n  return correctAnswer;\n};\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst StartContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  height: 100%;\n`;\n\nconst StartHeading = styled.h1`\n  margin: 0;\n`;\nconst StartText = styled.p``;\nconst StartButton = styled.button`\n  appearance: none;\n  font-size: 1em;\n  border: 0;\n  margin: 0;\n  padding: 0.6em 1.6em;\n  font-size: 1.2em;\n  border: 2px solid black;\n  cursor: pointer;\n  outline: none;\n\n  &:hover {\n    background-color: #000;\n    color: #fff;\n  }\n`;\n\nconst Start = ({ questionsAmount, nextPhase }) => {\n  return (\n    <StartContainer>\n      <StartHeading>Welcome!</StartHeading>\n      <StartText>This test has {questionsAmount} questions to answer</StartText>\n      <StartButton type=\"button\" onClick={nextPhase}>\n        Start\n      </StartButton>\n    </StartContainer>\n  );\n};\n\nexport default Start;\n","import React, { useState } from 'react';\nimport styled, { createGlobalStyle } from 'styled-components';\nimport Stepper from 'components/stepper';\nimport Score from 'components/score';\nimport Start from 'components/start';\n\nconst GlobalStyle = createGlobalStyle`\n  html, body {\n    margin: 0;\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n  }\n`;\n\nconst DivContainer = styled.div`\n  width: 100%;\n  height: 100%;\n  max-height: 400px;\n  max-width: 520px;\n`;\n\nconst Wrapper = styled.div`\n  display: grid;\n  align-items: center;\n  justify-items: center;\n  width: 100vw;\n  height: 100vh;\n`;\n\nconst TestWrapper = ({ questions }) => {\n  const [phase, setPhase] = useState(0);\n  const [answers, setAnswers] = useState({});\n\n  const nextPhase = () => {\n    setPhase(phase + 1);\n  };\n\n  const resetPhases = () => {\n    setAnswers({});\n    setPhase(0);\n  };\n\n  const completeTest = (answers) => {\n    setAnswers(answers);\n    nextPhase();\n  };\n\n  return (\n    <>\n      <GlobalStyle />\n      <Wrapper>\n        <DivContainer>\n          {phase === 0 && (\n            <Start questionsAmount={questions.length} nextPhase={nextPhase} />\n          )}\n          {phase === 1 && (\n            <Stepper questions={questions} onCompleteTest={completeTest} />\n          )}\n          {phase === 2 && (\n            <Score\n              questions={questions}\n              answers={answers}\n              resetPhases={resetPhases}\n            />\n          )}\n        </DivContainer>\n      </Wrapper>\n    </>\n  );\n};\n\nexport default TestWrapper;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport TestWrapper from 'components/test-wrapper';\nimport data from 'data/questions.json';\n\nReactDOM.render(\n  <React.StrictMode>\n    <TestWrapper questions={data.questions} />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}